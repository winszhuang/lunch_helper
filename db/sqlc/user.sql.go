// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
    line_id,
    name,
    picture
) VALUES (
    $1, $2, $3
)
RETURNING id, line_id, name, picture, google_maps_api_call_count, role_id
`

type CreateUserParams struct {
	LineID  string `json:"line_id"`
	Name    string `json:"name"`
	Picture string `json:"picture"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.LineID, arg.Name, arg.Picture)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LineID,
		&i.Name,
		&i.Picture,
		&i.GoogleMapsApiCallCount,
		&i.RoleID,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, line_id, name, picture, google_maps_api_call_count, role_id
FROM "user"
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LineID,
		&i.Name,
		&i.Picture,
		&i.GoogleMapsApiCallCount,
		&i.RoleID,
	)
	return i, err
}

const getUserByLineID = `-- name: GetUserByLineID :one
SELECT id, line_id, name, picture, google_maps_api_call_count, role_id
FROM "user"
WHERE line_id = $1
`

func (q *Queries) GetUserByLineID(ctx context.Context, lineID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByLineID, lineID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LineID,
		&i.Name,
		&i.Picture,
		&i.GoogleMapsApiCallCount,
		&i.RoleID,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, line_id, name, picture, google_maps_api_call_count, role_id
FROM "user"
LIMIT $1 OFFSET $2
`

type GetUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.LineID,
			&i.Name,
			&i.Picture,
			&i.GoogleMapsApiCallCount,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
