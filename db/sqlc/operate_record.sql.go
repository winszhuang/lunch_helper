// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: operate_record.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createOperateRecord = `-- name: CreateOperateRecord :one
INSERT INTO operate_record (
    user_id,
    food_id,
    before,
    after,
    operate_category
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, user_id, food_id, before, after, update_at, operate_category
`

type CreateOperateRecordParams struct {
	UserID          int32          `json:"user_id"`
	FoodID          int32          `json:"food_id"`
	Before          sql.NullString `json:"before"`
	After           sql.NullString `json:"after"`
	OperateCategory int16          `json:"operate_category"`
}

func (q *Queries) CreateOperateRecord(ctx context.Context, arg CreateOperateRecordParams) (OperateRecord, error) {
	row := q.db.QueryRowContext(ctx, createOperateRecord,
		arg.UserID,
		arg.FoodID,
		arg.Before,
		arg.After,
		arg.OperateCategory,
	)
	var i OperateRecord
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FoodID,
		&i.Before,
		&i.After,
		&i.UpdateAt,
		&i.OperateCategory,
	)
	return i, err
}

const getOperateRecords = `-- name: GetOperateRecords :many
SELECT id, user_id, food_id, before, after, update_at, operate_category
FROM operate_record
LIMIT $1 OFFSET $2
`

type GetOperateRecordsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetOperateRecords(ctx context.Context, arg GetOperateRecordsParams) ([]OperateRecord, error) {
	rows, err := q.db.QueryContext(ctx, getOperateRecords, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OperateRecord
	for rows.Next() {
		var i OperateRecord
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FoodID,
			&i.Before,
			&i.After,
			&i.UpdateAt,
			&i.OperateCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOperateRecordsByDateRange = `-- name: GetOperateRecordsByDateRange :many
SELECT id, user_id, food_id, before, after, update_at, operate_category
FROM operate_record
WHERE update_at >= $1 AND update_at <= $2
LIMIT $3 OFFSET $4
`

type GetOperateRecordsByDateRangeParams struct {
	UpdateAt   time.Time `json:"update_at"`
	UpdateAt_2 time.Time `json:"update_at_2"`
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
}

func (q *Queries) GetOperateRecordsByDateRange(ctx context.Context, arg GetOperateRecordsByDateRangeParams) ([]OperateRecord, error) {
	rows, err := q.db.QueryContext(ctx, getOperateRecordsByDateRange,
		arg.UpdateAt,
		arg.UpdateAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OperateRecord
	for rows.Next() {
		var i OperateRecord
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FoodID,
			&i.Before,
			&i.After,
			&i.UpdateAt,
			&i.OperateCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOperateRecordsByUserID = `-- name: GetOperateRecordsByUserID :many
SELECT id, user_id, food_id, before, after, update_at, operate_category
FROM operate_record
WHERE user_id = $1
LIMIT $2 OFFSET $3
`

type GetOperateRecordsByUserIDParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetOperateRecordsByUserID(ctx context.Context, arg GetOperateRecordsByUserIDParams) ([]OperateRecord, error) {
	rows, err := q.db.QueryContext(ctx, getOperateRecordsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OperateRecord
	for rows.Next() {
		var i OperateRecord
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FoodID,
			&i.Before,
			&i.After,
			&i.UpdateAt,
			&i.OperateCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
