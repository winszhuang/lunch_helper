// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: feedback.sql

package db

import (
	"context"
	"time"
)

const createFeedback = `-- name: CreateFeedback :one
INSERT INTO feedback (
    user_id,
    food_id,
    edit_by
) VALUES (
    $1, $2, $3
)
RETURNING id, user_id, food_id, edit_by, created_at, status
`

type CreateFeedbackParams struct {
	UserID int32 `json:"user_id"`
	FoodID int32 `json:"food_id"`
	EditBy int32 `json:"edit_by"`
}

func (q *Queries) CreateFeedback(ctx context.Context, arg CreateFeedbackParams) (Feedback, error) {
	row := q.db.QueryRowContext(ctx, createFeedback, arg.UserID, arg.FoodID, arg.EditBy)
	var i Feedback
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FoodID,
		&i.EditBy,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const getFeedback = `-- name: GetFeedback :many
SELECT id, user_id, food_id, edit_by, created_at, status
FROM feedback
LIMIT $1 OFFSET $2
`

type GetFeedbackParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetFeedback(ctx context.Context, arg GetFeedbackParams) ([]Feedback, error) {
	rows, err := q.db.QueryContext(ctx, getFeedback, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feedback
	for rows.Next() {
		var i Feedback
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FoodID,
			&i.EditBy,
			&i.CreatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedbackByDateRange = `-- name: GetFeedbackByDateRange :many
SELECT id, user_id, food_id, edit_by, created_at, status
FROM feedback
WHERE created_at >= $1 AND created_at <= $2
LIMIT $3 OFFSET $4
`

type GetFeedbackByDateRangeParams struct {
	CreatedAt   time.Time `json:"created_at"`
	CreatedAt_2 time.Time `json:"created_at_2"`
	Limit       int32     `json:"limit"`
	Offset      int32     `json:"offset"`
}

func (q *Queries) GetFeedbackByDateRange(ctx context.Context, arg GetFeedbackByDateRangeParams) ([]Feedback, error) {
	rows, err := q.db.QueryContext(ctx, getFeedbackByDateRange,
		arg.CreatedAt,
		arg.CreatedAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feedback
	for rows.Next() {
		var i Feedback
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FoodID,
			&i.EditBy,
			&i.CreatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedbackByStatus = `-- name: GetFeedbackByStatus :many
SELECT id, user_id, food_id, edit_by, created_at, status
FROM feedback
`

func (q *Queries) GetFeedbackByStatus(ctx context.Context) ([]Feedback, error) {
	rows, err := q.db.QueryContext(ctx, getFeedbackByStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feedback
	for rows.Next() {
		var i Feedback
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FoodID,
			&i.EditBy,
			&i.CreatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
