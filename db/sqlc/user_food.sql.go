// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user_food.sql

package db

import (
	"context"
	"database/sql"
)

const createUserFood = `-- name: CreateUserFood :one
INSERT INTO user_food (
    user_id,
    food_id
) VALUES (
    $1, $2
)
RETURNING user_id, food_id
`

type CreateUserFoodParams struct {
	UserID int32 `json:"user_id"`
	FoodID int32 `json:"food_id"`
}

func (q *Queries) CreateUserFood(ctx context.Context, arg CreateUserFoodParams) (UserFood, error) {
	row := q.db.QueryRowContext(ctx, createUserFood, arg.UserID, arg.FoodID)
	var i UserFood
	err := row.Scan(&i.UserID, &i.FoodID)
	return i, err
}

const deleteUserFood = `-- name: DeleteUserFood :exec
DELETE FROM user_food
WHERE user_id = $1 AND food_id = $2
`

type DeleteUserFoodParams struct {
	UserID int32 `json:"user_id"`
	FoodID int32 `json:"food_id"`
}

func (q *Queries) DeleteUserFood(ctx context.Context, arg DeleteUserFoodParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserFood, arg.UserID, arg.FoodID)
	return err
}

const getAllUserFoods = `-- name: GetAllUserFoods :many
SELECT id, name, price, image, description, restaurant_id, version, edit_by, user_id, food_id
FROM food
JOIN user_food ON user_food.food_id = food.id
WHERE user_food.user_id = $1
`

type GetAllUserFoodsRow struct {
	ID           int32          `json:"id"`
	Name         string         `json:"name"`
	Price        string         `json:"price"`
	Image        sql.NullString `json:"image"`
	Description  sql.NullString `json:"description"`
	RestaurantID int32          `json:"restaurant_id"`
	Version      int16          `json:"version"`
	EditBy       sql.NullInt32  `json:"edit_by"`
	UserID       int32          `json:"user_id"`
	FoodID       int32          `json:"food_id"`
}

func (q *Queries) GetAllUserFoods(ctx context.Context, userID int32) ([]GetAllUserFoodsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserFoods, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUserFoodsRow
	for rows.Next() {
		var i GetAllUserFoodsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Image,
			&i.Description,
			&i.RestaurantID,
			&i.Version,
			&i.EditBy,
			&i.UserID,
			&i.FoodID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserFoodByFoodId = `-- name: GetUserFoodByFoodId :one
SELECT id, name, price, image, description, restaurant_id, version, edit_by, user_id, food_id
FROM food
JOIN user_food ON user_food.food_id = food.id
WHERE user_food.user_id = $1 AND user_food.food_id = $2
`

type GetUserFoodByFoodIdParams struct {
	UserID int32 `json:"user_id"`
	FoodID int32 `json:"food_id"`
}

type GetUserFoodByFoodIdRow struct {
	ID           int32          `json:"id"`
	Name         string         `json:"name"`
	Price        string         `json:"price"`
	Image        sql.NullString `json:"image"`
	Description  sql.NullString `json:"description"`
	RestaurantID int32          `json:"restaurant_id"`
	Version      int16          `json:"version"`
	EditBy       sql.NullInt32  `json:"edit_by"`
	UserID       int32          `json:"user_id"`
	FoodID       int32          `json:"food_id"`
}

func (q *Queries) GetUserFoodByFoodId(ctx context.Context, arg GetUserFoodByFoodIdParams) (GetUserFoodByFoodIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserFoodByFoodId, arg.UserID, arg.FoodID)
	var i GetUserFoodByFoodIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Image,
		&i.Description,
		&i.RestaurantID,
		&i.Version,
		&i.EditBy,
		&i.UserID,
		&i.FoodID,
	)
	return i, err
}

const getUserFoods = `-- name: GetUserFoods :many
SELECT id, name, price, image, description, restaurant_id, version, edit_by, user_id, food_id
FROM food
JOIN user_food ON user_food.food_id = food.id
WHERE user_food.user_id = $1
LIMIT $2 OFFSET $3
`

type GetUserFoodsParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetUserFoodsRow struct {
	ID           int32          `json:"id"`
	Name         string         `json:"name"`
	Price        string         `json:"price"`
	Image        sql.NullString `json:"image"`
	Description  sql.NullString `json:"description"`
	RestaurantID int32          `json:"restaurant_id"`
	Version      int16          `json:"version"`
	EditBy       sql.NullInt32  `json:"edit_by"`
	UserID       int32          `json:"user_id"`
	FoodID       int32          `json:"food_id"`
}

func (q *Queries) GetUserFoods(ctx context.Context, arg GetUserFoodsParams) ([]GetUserFoodsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserFoods, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserFoodsRow
	for rows.Next() {
		var i GetUserFoodsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Image,
			&i.Description,
			&i.RestaurantID,
			&i.Version,
			&i.EditBy,
			&i.UserID,
			&i.FoodID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
